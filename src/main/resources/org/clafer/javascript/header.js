importClass(Packages.org.clafer.ast.Asts);

var scope = rc.setScope.bind(rc);
var defaultScope = rc.setDefaultScope.bind(rc);
var intRange = rc.setIntRange.bind(rc);
var clafer = rc.getModel().addChild.bind(rc.getModel());
var abstract = rc.getModel().addAbstractClafer.bind(rc.getModel());
var constraint = rc.getModel().addConstraint.bind(rc.getModel());

var int = Asts.IntType;
var bool = Asts.BoolType;

var $this = Asts.$this;
var global = Asts.global;
var constant = Asts.constant;
var join = Asts.join;
var joinParent = Asts.joinParent;
var joinRef = Asts.joinRef;
var not = Asts.not;
var minus = Asts.minus;
var card = Asts.card;
var test = Asts.test;
var equal = Asts.equal;
var notEqual = Asts.notEqual;
var lessThan = Asts.lessThan;
var lessThanEqual = Asts.lessThanEqual;
var greaterThan = Asts.greaterThan;
var greaterThanEqual = Asts.greaterThanEqual;
var arithm = Asts.arithm;
var add = Asts.add;
var sub = Asts.sub;
var mul = Asts.mul;
var div = Asts.div;
var and = Asts.and;
var ifOnlyIf = Asts.ifOnlyIf;
var implies = Asts.implies;
var or = Asts.or;
var xor = Asts.xor;
var union = Asts.union;
var diff = Asts.diff;
var inter = Asts.inter;
var membership = Asts.membership;
var $in = Asts.in;
var notIn = Asts.notIn;
var inter = Asts.inter;
var upcast = Asts.upcast;
var local = Asts.local;
var decl = Asts.decl;
var disjDecl = Asts.disjDecl;
var quantify = Asts.quantify;
var all = Asts.all;
var lone = Asts.lone;
var none = Asts.none;
var one = Asts.one;
var some = Asts.some;
